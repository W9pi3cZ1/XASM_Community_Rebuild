/*
动态分配区域：
0xf000 - 0xffff

A:0x0000 表示当前地址是0x0000
S:0x000f 表示这部分占用的字节数为0x000f字节
A_n+1 = A_n + S_n

打印函数使用的区域(0xf00?)：
0xf000 -> 存储函数体偏移值 9(add)+9(mov/copy)+5(goto)=23=0x17
0xf001 -> 存储0x01用于循环变量自增
0xf002 -> 存储0x00用于判断字符串是否结束
0xf003 -> 存储打印函数地址用于调用打印函数
0xf004 -> 下一函数初始化地址
0xf005 -> 打印函数调用后返回的位置

内存查看函数使用的区域(0xf01?)：
0xf010 -> 存储内存查看函数地址用于调用内存查看函数
0xf011 -> 下一函数初始化地址（测试：函数体地址）
0xf012 -> 内存查看函数调用后返回的位置
0xf013 -> 临时指向要输出的字符和地址
0xf014 -> 临时计算结果
0xf015 -> 临时计算结果

*/

---- 打印函数 3(调用栈)+55(初始化)+41(函数体)=99=0x63 字节

--- 此函数的调用栈 A:0x0000
0xff -- A:0x0000 S:0x0001
0x00 -- A:0x0001 S:0x0001
0xff -- A:0x0002 S:0x0001

--- 此函数初始化 A:0x0003
-- 将偏移值存储在0xf000
mov 0x00 0x00 0xf0 0x00 -- mov A:0x0003 S:0x0009
    0x00 0x00 0x00 0x17 -- 偏移量 0x17
-- 存储0x01用于循环变量自增
mov 0x00 0x00 0xf0 0x01 -- mov A:0x000c S:0x0009
    0x00 0x00 0x00 0x01
-- 存储0x00用于判断字符串是否结束
mov 0x00 0x00 0xf0 0x02 -- mov A:0x0015 S:0x0009
    0x00 0x00 0x00 0x00
-- 存储当前地址(geta及其参数的后面)到0xf003用于调用本函数
geta 0x00 0x00 0xf0 0x03 -- geta A:0x001e S:0x0005
-- 偏移地址到函数体
add 0x00 0x00 0xf0 0x03 -- add A:0x0023 S:0x0009
    0x00 0x00 0xf0 0x00
-- 下一函数的初始化地址 
mov 0x00 0x00 0xf0 0x04 -- mov A:0x002c S:0x0009
    0x00 0x00 0x00 0x63
-- 跳转到下一函数初始化地址
goto 0x00 0x00 0xf0 0x04 -- goto A:0x0035 S:0x0005

--- 此函数体 A:0x003a
-- 打印字符串的一个字符
putc 0x00 0x00 0x00 0x01 -- putc A:0x003a S:0x0005
-- 移到下一字符
add 0x00 0x00 0x00 0x01 -- add A:0x003f S:0x0009
    0x00 0x00 0xf0 0x01
-- 复制
copy 0x00 0x00 0x00 0x55 -- 其中第四位是 a 处的地址 A:0x0048 S:0x0009
     0x00 0x00 0x00 0x01
-- 判断下一字符是不是0x00
= 0x00 0x00 0x00 0x00 -- `=` 后的第4位是 a 处 A:0x0051 S:0x000d(13)
  0x00 0x00 0xf0 0x02
  0x00 0x00 0xf0 0x05 -- 函数调用后返回的位置
-- 如果不是0x00
goto 0x00 0x00 0xf0 0x03 -- 再次调用本函数 A:0x005e S:0x0005

---- 内存查看函数
--- 此函数的调用栈 A:0x0063
0xff -- A:0x0063 S:0x0001
0x00 -- 内存起始位置 A:0x0064 S:0x0001
0x00 -- 内存结束位置 A:0x0065 S:0x0001
0x00 -- 输出了多少字节 A:0x0066 S:0x0001
0xff -- A:0x0067 S:0x0001


--- 此函数初始化 A:0x0068
geta 0x00 0x00 0xf0 0x10 -- 获取当前地址 A:0x0068 S:0x0005
-- 偏移地址到函数体
add 0x00 0x00 0xf0 0x10 -- add A:0x006d S:0x0009
    0x00 0x00 0xf0 0x00
-- 下一函数的初始化地址（测试：调用函数体）
copy 0x00 0x00 0xf0 0x11 -- mov A:0x0076 S:0x0009
     0x00 0x00 0xf0 0x10
-- 跳到下一函数初始化地址 （测试：调用函数体）
goto 0x00 0x00 0xf0 0x11 -- goto A:0x007f S:0x0005

--- 函数体 A:0x0084
--: 测试专用的代码
-- 测试：起始位置
0xff
--mov
 0x00 0x00 0x00 0x64 -- mov A:0x0084 S:0x0009
    0x00 0x00 0x00 0x00
-- 测试：结束位置
mov 0x00 0x00 0x00 0x65 -- mov A:0x008d S:0x0009
    0x00 0x00 0x02 0x00
-- 测试：结束后返回位置
mov 0x00 0x00 0xf0 0x12 -- mov A:0x0096 S:0x0009
    0x00 0x00 0x01 0x79
geta 0x00 0x00 0xf0
--0x10 -- geta A:0x009f S:0x0005
0xff
--:
---- 打印
-- 判断是否补0
0xff -- A:0x00a4 S:0x0001
0x10 -- A:0x00a5 S:0x0001
0xff -- A:0x00a6 S:0x0001
copy 0x00 0x00 0x00 0xbd -- copy 的第1个地址为 b 处 A:0x00a7 S:0x0009
     0x00 0x00 0x00 0x64
mov 0x00 0x00 0xf0 0x13 -- mov A:0x00b0 S:0x0009
    0x00 0x00 0x01 0x43 -- 指向补0调用地址
< 0x00 0x00 0x00 0x00 -- `<` 后第4位是 b 处 A:0x00b9 S:0x000d(13)
  0x00 0x00 0x00 0xa5
  0x00 0x00 0xf0 0x13 -- 指向补0调用地址的指针
-- 直接打印
0xff -- A:0x00c6 S:0x0001
" " -- A:0x00c7 S:0x0001
0xff -- A:0x00c8 S:0x0001
-- 打印当前地址的值
puth 0x00 0x00 0x00 0x64 -- puth A:0x00c9 S:0x0005
mov 0x00 0x00 0xf0 0x13 -- mov A:0x00ce S:0x0009
    0x00 0x00 0x00 0xc7
putc 0x00 0x00 0xf0 0x13 -- putc A:0x00d7 S:0x0005
-- 移动至下个字节
add 0x00 0x00 0x00 0x64 -- add A:0x00dc S:0x0009
    0x00 0x00 0xf0 0x01
-- 0x0066 计数器+1
add 0x00 0x00 0x00 0x66 -- add A:0x00e5 S:0x0009
    0x00 0x00 0xf0 0x01
< 0x00 0x00 0x00 0x65 -- `<` A:0x00ee S:0x000d(13)
  0x00 0x00 0x00 0x64
  0x00 0x00 0xf0 0x12
-- 判断是否换行
mov 0x00 0x00 0xf0 0x13 -- mov A:0x00fb S:0x0009
    0x00 0x00 0x01 0x62 -- 换行调用地址
copy 0x00 0x00 0xf0 0x14 -- copy A:0x0104 S:0x0009
     0x00 0x00 0x00 0x66 -- 临时计算结果
copy 0x00 0x00 0xf0 0x15 -- copy A:0x010d S:0x0009
     0x00 0x00 0x00 0x66 -- 临时计算结果
-- 取余
xsub 0x00 0x00 0xf0 0x14 -- (C/0x10) C:0x0066 xsub A:0x0116 S:0x0009
     0x00 0x00 0x00 0xa5 
xadd 0x00 0x00 0xf0 0x14 -- (floor(C/0x10)*0x10) xadd A:0x011f S:0x0009
     0x00 0x00 0x00 0xa5
sub 0x00 0x00 0xf0 0x15 -- (C-floor(C/0x10)*0x10 = Count%0x10) sub A:0x0128 S:0x0009
    0x00 0x00 0xf0 0x14
= 0x00 0x00 0xf0 0x15 -- `=` A:0x0131 S:0x000d(13)
  0x00 0x00 0xf0 0x02
  0x00 0x00 0xf0 0x13
goto 0x00 0x00 0xf0 0x10 -- goto A:0x013e S:0x0005
-- 补0
0xff -- A:0x0143 S:0x0001
"0" -- A:0x0144 S:0x0001
0xff -- A:0x0145 S:0x0001
mov 0x00 0x00 0xf0 0x13 -- mov A:0x0146 S:0x0009
    0x00 0x00 0x01 0x44 -- 0xf013被指向0字符
putc 0x00 0x00 0xf0 0x13 -- putc A:0x014f S:0x0005
mov 0x00 0x00 0xf0 0x13 -- mov A:0x0154 S:0x0009
    0x00 0x00 0x00 0xc6
goto 0x00 0x00 0xf0 0x13 -- goto A:0x015d S:0x0005
-- 换行
0xff -- A:0x0162 S:0x0001
"\n" -- A:0x0163 S:0x0001
0xff -- A:0x0164 S:0x0001
mov 0x00 0x00 0xf0 0x13 -- mov A:0x0165 S:0x0009
    0x00 0x00 0x01 0x63
putc 0x00 0x00 0xf0 0x13 -- putc A:0x016e S:0x0005
goto 0x00 0x00 0xf0 0x10 -- goto A:0x0173 S:0x0005
exit -- exit A:0x0178 S:0x0001