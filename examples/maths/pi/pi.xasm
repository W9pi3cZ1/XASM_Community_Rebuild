-- mod func
[mod.stack]
0xff
[mod.addr] 0x00
[mod.ret] 0x00
[mod.num_1] 0x00 -- a, the result
[mod.num_2] 0x00 -- b
[mod.tmp_1] 0x00 -- a / b (Int)
[mod.tmp_2] 0x00 -- a / b * b
[mod.init.next] 0x00
0xff

[mod.init]
mov @mod.addr @mod.func
mov @mod.init.next @frac_put.init
goto @mod.init.next

[mod.func]
copy @mod.tmp_1 @mod.num_1 -- @mod.tmp_1 = @mod.num_1
xsub @mod.tmp_1 @mod.num_2 -- @mod.tmp_1 /= @mod.num_2
copy @mod.tmp_2 @mod.tmp_1 -- @mod.tmp_2 = @mod.tmp_1
xadd @mod.tmp_2 @mod.num_2 -- @mod.tmp_1 *= @mod.num_2  
sub @mod.num_1 @mod.tmp_2 -- @mod.tmp_1 -= @mod.tmp_1
goto @mod.ret

-- frac print func
[frac_put.stack]
0xff
[frac_put.addr] 0x00
[frac_put.ret] 0x00
[frac_put.nume] 0x00
[frac_put.denom] 0x00
[frac_put.tmp] 0x00 -- @frac_put.nume / @frac_put.denom (Int)
[frac_put.dot] "."
[frac_put.zero] 0x00
[frac_put.one] 0x01
[frac_put.ten] 0x0a
[frac_put.put_ptr] 0x00
[frac_put.loop_ptr] 0x00
[frac_put.digit] 0x00
[frac_put.init.next] 0x00
0xff

[frac_put.init]
mov @frac_put.addr @frac_put.func
mov @frac_put.init.next @pi_calc.init
goto @frac_put.init.next

[frac_put.func]
    -- mod(@frac_put.nume, @frac_put.denom)
    copy @mod.num_1 @frac_put.nume
    copy @mod.num_2 @frac_put.denom
    mov @mod.ret @frac_put.mod_1.ret -- @mod.ret = Addr([frac_put.mod_1.ret])
    goto @mod.addr
    [frac_put.mod_1.ret]
    -- Save result
    copy @frac_put.nume @mod.num_1
    copy @frac_put.tmp @mod.tmp_1
xadd @frac_put.nume @frac_put.ten -- @frac_put.tmp = @frac_put.tmp * 10
mov @frac_put.put_ptr @frac_put.tmp
putn @frac_put.put_ptr -- print Integer part
mov @frac_put.put_ptr @frac_put.dot
putc @frac_put.put_ptr -- print dot (`.`)
    [frac_put.loop_print]
    = @frac_put.digit @frac_put.zero @frac_put.ret -- if @frac_put.digit == 0 goto @frac_put.ret
    sub @frac_put.digit @frac_put.one -- @frac_put.digit = @frac_put.digit - 1
        -- mod(@frac_put.nume, @frac_put.denom)
        copy @mod.num_1 @frac_put.nume
        copy @mod.num_2 @frac_put.denom
        mov @mod.ret @frac_put.mod_2.ret -- @mod.ret = Addr(@frac_put.mod_1.ret)
        goto @mod.addr
        [frac_put.mod_2.ret]
        -- save result
        copy @frac_put.nume @mod.num_1
        copy @frac_put.tmp @mod.tmp_1
    xadd @frac_put.nume @frac_put.ten -- @frac_put.tmp = @frac_put.tmp * 10
    mov @frac_put.put_ptr @frac_put.tmp
    putn @frac_put.put_ptr -- print A digit
    -- Continue Loop
    mov @frac_put.loop_ptr @frac_put.loop_print
    goto @frac_put.loop_ptr

[pi_calc.stack]
0xff
[pi_calc.addr] 0x00
[pi_calc.ret] 0x00
[pi_calc.iter.max] 0x00 -- Max Iteration
[pi_calc.denom] 0x00 -- A big number
[pi_calc.cur_pi.nume] 0x00 -- Current Pi
[pi_calc.tmp.nume] 0x00 -- Temporary Numerator
[pi_calc.tmp.sign] 0x01 -- Temporary Sign
[pi_calc.tmp_denom] 0x00
[pi_calc.iter.count] 0x00 -- Current Iteration
[pi_calc.zero] 0x00
[pi_calc.one] 0x01
[pi_calc.tmp_ptr] 0x00 -- Temporary Pointer
[pi_calc.debug.newline] "\n"
[pi_calc.init.next] 0x00
0xff

[pi_calc.init]
mov @pi_calc.addr @pi_calc.func
mov @pi_calc.init.next @main.init
goto @pi_calc.init.next

[pi_calc.func]
mov @pi_calc.denom 0x02 0x03 0x04 0x05
mov @pi_calc.iter.count 0x00 0x00 0x00 0x00
    [pi_calc.loop_iter]
    -- Calculate Pi
    -- Calculate Numerator
    mov @pi_calc.tmp.nume 0x00 0x00 0x00 0x04
    xadd @pi_calc.tmp.nume @pi_calc.denom
    -- 2n+1
    mov @pi_calc.tmp_denom 0x00 0x00 0x00 0x02
    xadd @pi_calc.tmp_denom @pi_calc.iter.count
    add @pi_calc.tmp_denom @pi_calc.one
    xsub @pi_calc.tmp.nume @pi_calc.tmp_denom
    -- Add to Pi
    xadd @pi_calc.tmp.nume @pi_calc.tmp.sign
    add @pi_calc.cur_pi.nume @pi_calc.tmp.nume
    -- Change sign
    sub @pi_calc.zero @pi_calc.tmp.sign -- @pi_calc.zero -= @pi_calc.tmp.sign
    copy @pi_calc.tmp.sign @pi_calc.zero -- @pi_calc.tmp.sign = @pi_calc.zero
    mov @pi_calc.zero 0x00 0x00 0x00 0x00 -- Reset @pi_calc.zero
    -- Print Pi
    copy @frac_put.nume @pi_calc.cur_pi.nume
    copy @frac_put.denom @pi_calc.denom
    mov @frac_put.digit 0x00 0x00 0x00 0x0f
    mov @frac_put.ret @pi_calc_1.debug.put_frac_1.ret
    goto @frac_put.addr
    [pi_calc_1.debug.put_frac_1.ret]
    mov @pi_calc.tmp_ptr @pi_calc.debug.newline
    putc @pi_calc.tmp_ptr
    -- Judge break condition
    add @pi_calc.iter.count @pi_calc.one
    = @pi_calc.iter.count @pi_calc.iter.max @pi_calc.ret
    -- Back to @pi_calc.loop_iter
    mov @pi_calc.tmp_ptr @pi_calc.loop_iter
    goto @pi_calc.tmp_ptr

[main.stack]
0xff
[main.num] 0x00
0xff
    
[main.init]
mov @main.num 0x00 0x10 0x00 0x00

[main.func]
copy @pi_calc.iter.max @main.num
mov @pi_calc.ret @main.pi_calc_1.ret
goto @pi_calc.addr
[main.pi_calc_1.ret]
copy @frac_put.nume @pi_calc.cur_pi.nume
copy @frac_put.denom @pi_calc.denom
mov @frac_put.digit 0x00 0x00 0x00 0x0f
mov @frac_put.ret @main.put_frac_1.ret
goto @frac_put.addr
[main.put_frac_1.ret]
exit